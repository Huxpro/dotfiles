# Credits: heavily inspired from # https://github.com/nicksp/dotfiles/blob/master/git/gitconfig

[core]
        editor = vim
        autocrlf = input
        excludesfile = /Users/hux/.gitignore
        #safecrlf = false

[init]
        templatedir = ~/.gittemplates
        defaultBranch = main

[alias]
        # Staging
        a = add
        aa = add --all

        # Branch
        br = branch
        branch-name = rev-parse --abbrev-ref HEAD
        branch-diff = diff master...HEAD

        # Commit
        c = commit
        ca = commit -a
        cm = commit -m
        cam = commit -am
        amend = commit --amend
        amend-all = !git add --all && git commit --amend --reuse-message=HEAD

        # Clone
        cl = clone
        sclone = clone --depth=1

        # Checkout
        co = checkout
        cb = checkout -b

        # Cherry-pick
        cp = cherry-pick

        # Diff
        df = diff
        dt = difftool

        # Merge
        m = merge

        # Pull
        pl = pull
        plom = pull origin master
        plum = pull upstream master
        preb = !git fetch upstream && git rebase upstream/master

        # Push
        p = push
        pom = push origin master
        poh = push origin head

        # http://www.codeblocq.com/2016/01/Untrack-files-already-added-to-git-repository-based-on-gitignore/
        re-ignore = !git rm -r --cached . && git add . && git commit -m "reset .gitignore"

        # Undos
        # Undo staged files from Index
        unstage = reset HEAD --
        # Undo last commit but leave changes in working
        uncommit = reset --soft HEAD~1
        # Remove last commit completely.
        uncommit-hard = reset --hard HEAD~1
        # Discard workding changes to HEAD commit
        discard = checkout --
        # Revert some changes from the HEAD commit to HEAD-1 commit.
        rev = checkout HEAD^ --
        revert-some = rev
        # Revert entirely to last commit
        revert-hard = reset --hard HEAD

        # Remote
        r = remote -v

        # Status
        st = status
        ss = status -sb

        # Logging
        l = log --pretty=hux
        lg = log --color --graph --all --pretty=hux --abbrev-commit#Graph
        ll = log --stat --abbrev-commit# Stats
        lc = shortlog --summary --numbered# List contributors

        # Misc
        publish = "!git push --set-upstream origin $(git branch-name)"

[pretty]
        hux = "%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset"
        #            │                    │         │          │                  └─ author name
        #            │                    │         │          └─ committer date (relative)
        #            │                    │         └─ message
        #            │                    └─ decorations (branch, heads or tags)
        #            └─ hash (abbreviated)

# So much color
[color]
        ui = always

[color "branch"]
        current = green bold
        local = green
        remote = yellow

[color "diff"]
        frag = magenta
        meta = yellow
        new = green
        old = red

[color "diff-highlight"]
        oldNormal = red bold
        oldHighlight = "red bold 52"
        newNormal = "green bold"
        newHighlight = "green bold 22"


[color "status"]
        added = green
        changed = yellow
        untracked = red


# Push easily http://stackoverflow.com/a/23918418/89484
[push]
        # Make `git push` automatically push relevant
        # annotated tags when pushing branches out
        followTags = true
        default = current


# large file storage
[filter "lfs"]
        required = true
        clean = git-lfs clean -- %f
        smudge = git-lfs smudge -- %f
        process = git-lfs filter-process


# difftool for side-by-side diff in vim
[diff]
        tool = vimdiff

[difftool]
        prompt = false
[difftool "sourcetree"]
        cmd = opendiff \"$LOCAL\" \"$REMOTE\"
        path = 

[mergetool "sourcetree"]
        cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
        trustExitCode = true

[commit]
        template = ~/.stCommitMsg

# Include local settings so different machines and dirs can override with its own requirements. e.g. I uses different email and url (proxy) for different machines
[include]
        path = ~/.gitconfig.local
